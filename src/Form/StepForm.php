<?php

namespace Dcat\Admin\Form;

use Dcat\Admin\Form;
use Dcat\Admin\Widgets\Form as WidgetForm;

class StepForm extends WidgetForm
{
    /**
     * @var string
     */
    protected $view = 'admin::form.step-form';

    /**
     * @var array
     */
    protected $buttons = [];

    /**
     * @var Form
     */
    protected $form;

    /**
     * @var StepBuilder
     */
    protected $parent;

    /**
     * @var int
     */
    protected $index;

    /**
     * @var string
     */
    protected $title;

    /**
     * @var string
     */
    protected $description;

    /**
     * StepForm constructor.
     *
     * @param Form   $form
     * @param int    $index
     * @param string $title
     */
    public function __construct(Form $form, int $index = 0, string $title = null)
    {
        $this->form = $form;
        $this->parent = $form->builder()->getStepBuilder();
        $this->index = $index;

        $this->initFields();

        $this->title($title);
    }

    /**
     * @param string|\Closure $title
     *
     * @return $this
     */
    public function title($title)
    {
        $this->title = value($title);

        return $this;
    }

    /**
     * @param string|\Closure $content
     *
     * @return $this
     */
    public function description($content)
    {
        $this->description = value($content);

        return $this;
    }

    /**
     * @return int
     */
    public function getIndex()
    {
        return $this->index;
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * @return string
     */
    protected function open()
    {
        if ($this->index > 0) {
            $this->setHtmlAttribute('style', 'display:none');
        }

        $this->setHtmlAttribute('data-toggle', 'validator');
        $this->setHtmlAttribute('role', 'form');

        return <<<HTML
<div {$this->formatHtmlAttributes()}>
HTML;
    }

    /**
     * @return string
     */
    protected function close()
    {
        return '</div>';
    }

    /**
     * @return void
     */
    protected function fillStash()
    {
        if ($this->data) {
            return;
        }

        if ($input = $this->parent->fetchStash()) {
            $this->fill($input);
        }
    }

    /**
     * @return string
     */
    public function render()
    {
        $this->fillStash();

        return parent::render(); // TODO: Change the autogenerated stub
    }

    /**
     * @param string $script
     *
     * @return $this
     */
    public function leaving($script)
    {
        $script = value($script);

        $this->parent->leaving(
            <<<JS
if (args.index == {$this->index}) {
    {$script}
}
JS
        );

        return $this;
    }

    /**
     * @param string $script
     *
     * @return $this
     */
    public function shown($script)
    {
        $script = value($script);

        $this->parent->shown(
            <<<JS
if (args.index == {$this->index}) {
    {$script}
}
JS
        );

        return $this;
    }
}

<?php

namespace Dcat\Admin\Widgets\Metrics;

use Dcat\Admin\Admin;
use Dcat\Admin\Support\Helper;
use Dcat\Admin\Widgets\ApexCharts\Chart;
use Dcat\Admin\Widgets\HasAjaxRequest;
use Dcat\Admin\Widgets\Widget;

class Card extends Widget
{
    use HasAjaxRequest;

    protected $view = 'admin::widgets.metrics.card';

    protected $options = [
        'icon' => 'feather icon-users',
        'contents' => '',
        'style' => 'primary',
        'ranges' => [],
        'chartHeight' => 70,
        'chart' => [
            'chart' => [
                'toolbar' => [
                    'show' => false,
                ],
                'sparkline' => [
                    'enabled' => true,
                ],
                'grid' => [
                    'show' => false,
                    'padding' => [
                        'left' => 0,
                        'right' => 0,
                    ]
                ],
            ],
            'tooltip' => [
                'x' => [
                    'show' => false,
                ],
            ],
            'xaxis' => [
                'labels' => [
                    'show' => false,
                ],
                'axisBorder' => [
                    'show' => false,
                ],
            ],
            'yaxis' => [
                'y' => 0,
                'offsetX' => 0,
                'offsetY' => 0,
                'padding' => ['left' => 0, 'right' => 0],
            ],
            'dataLabels' => [
                'enabled' => false,
            ],
            'stroke' => [
                'width' => 2.5,
            ],
        ]
    ];

    /**
     * @var Chart
     */
    protected $chart;

    protected $chartCallback;

    public function __construct($icon = 'feather icon-users', $contents = null)
    {
        $this->icon($icon);
        $this->contents($contents);
        $this->class('card');
    }

    /**
     * 初始化图表
     */
    public function initChart()
    {
        $this->options['chart']['chart']['height'] = $this->options['chartHeight'];

        $chart = Chart::make()
            ->colors(Admin::color()->get($this->options['style']))
            ->options($this->options['chart']);

        if ($callback = $this->chartCallback) {
            $callback($chart);
        }

        $this->chart = $this->variables['chart'] = $chart;
    }

    /**
     * 设置卡片内容.
     *
     * @param string $contents
     *
     * @return $this
     */
    public function contents($contents)
    {
        $this->options['contents'] = $contents;

        return $this;
    }

    /**
     * 设置图标
     *
     * @param string $icon
     *
     * @return $this
     */
    public function icon(?string $icon)
    {
        $this->options['icon'] = $icon;

        return $this;
    }

    /**
     * 设置主题色.
     *
     * @param string $style
     *
     * @return $this
     */
    public function style(string $style)
    {
        $this->options['style'] = $style;

        return $this;
    }

    /**
     * 设置卡片的可用范围.
     *
     * @param array $items
     *
     * @return $this
     */
    public function ranges(array $items)
    {
        $this->options['ranges'] = $items;

        return $this;
    }

    /**
     * 设置图表.
     *
     * @param array|int|\Closure $options
     *
     * @return $this
     */
    public function chart($options)
    {
        if ($options instanceof \Closure) {
            $this->chartCallback = $options;
        } elseif (is_numeric($options)) {
            $this->options['chartHeight'] = $options;
        } else {
            $this->options['chart'] = array_merge(
                $this->options['chart'],
                Helper::array($options)
            );
        }

        return $this;
    }

    /**
     * @return string
     */
    public function script()
    {
        return <<<JS

JS;
    }

    public function render()
    {
        $this->initChart();

        $this->script = $this->script();

        return parent::render(); // TODO: Change the autogenerated stub
    }
}
